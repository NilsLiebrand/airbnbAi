{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":12331747,"sourceType":"datasetVersion","datasetId":7715214}],"dockerImageVersionId":31041,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Training the model","metadata":{}},{"cell_type":"code","source":"import os\n#for dirname, _, filenames in os.walk('/kaggle/input'):\n#    for filename in filenames:\n        #print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:20.681899Z","iopub.execute_input":"2025-07-08T11:00:20.682551Z","iopub.status.idle":"2025-07-08T11:00:20.685829Z","shell.execute_reply.started":"2025-07-08T11:00:20.682530Z","shell.execute_reply":"2025-07-08T11:00:20.684954Z"}},"outputs":[],"execution_count":30},{"cell_type":"code","source":"import os\nimport numpy as np\nimport pandas as pd\nimport torch\nfrom torch import nn\nfrom torch.utils.data import Dataset, DataLoader, random_split\nfrom PIL import Image\nimport torchvision.transforms as transforms\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.impute import SimpleImputer\nimport matplotlib.pyplot as plt\n\n#progress bar\nfrom tqdm import trange\nfrom tqdm import tqdm","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:20.687139Z","iopub.execute_input":"2025-07-08T11:00:20.687400Z","iopub.status.idle":"2025-07-08T11:00:20.701258Z","shell.execute_reply.started":"2025-07-08T11:00:20.687385Z","shell.execute_reply":"2025-07-08T11:00:20.700773Z"}},"outputs":[],"execution_count":31},{"cell_type":"code","source":"torch.set_default_dtype(torch.float32)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:20.702812Z","iopub.execute_input":"2025-07-08T11:00:20.703431Z","iopub.status.idle":"2025-07-08T11:00:20.715700Z","shell.execute_reply.started":"2025-07-08T11:00:20.703410Z","shell.execute_reply":"2025-07-08T11:00:20.715058Z"}},"outputs":[],"execution_count":32},{"cell_type":"code","source":"use_cuda = True\nuse_cuda = False if not use_cuda else torch.cuda.is_available()\ndevice = torch.device('cuda:0' if use_cuda else 'cpu')\ntorch.cuda.get_device_name(device) if use_cuda else 'cpu'\nprint('Using device', device)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:20.716255Z","iopub.execute_input":"2025-07-08T11:00:20.716483Z","iopub.status.idle":"2025-07-08T11:00:20.731180Z","shell.execute_reply.started":"2025-07-08T11:00:20.716469Z","shell.execute_reply":"2025-07-08T11:00:20.730507Z"}},"outputs":[{"name":"stdout","text":"Using device cuda:0\n","output_type":"stream"}],"execution_count":33},{"cell_type":"markdown","source":"## Loading and preparing data","metadata":{}},{"cell_type":"code","source":"# Load and filter data\ndata = pd.read_csv(\"/kaggle/input/airbnbdata-barcelona/listing_data.csv\")\ndata = data.select_dtypes(exclude=['object', 'string'])\n#data = data[[\"id\",\"price\"]]\n\n# Define target column\ntarget_clm = \"price\"\n\n# Drop rows with missing target and missing id\ndata = data.dropna(subset=[target_clm, \"id\"])\n\ndata = data.select_dtypes(exclude=['object', 'string'])\n#data = data.drop(\"id\", axis=1)\n\n# Create an imputer that fills NaNs with the mean of each column\nimputer = SimpleImputer(strategy='mean')\n\n# Fit the imputer on your data and transform it\ndata_imputed = imputer.fit_transform(data)\n\n# Convert back to DataFrame to keep column names\ndata = pd.DataFrame(data_imputed, columns=data.columns)  \n\npicture_dir = \"/kaggle/input/airbnbdata-barcelona/picture_url_128x128/picture_url_128x128\"\nhost_picture_dir = \"/kaggle/input/airbnbdata-barcelona/host_picture_url_128x128/host_picture_url_128x128\"\n\ndef images_exist(img_id):\n    img_id = int(img_id)\n    host_path = os.path.join(host_picture_dir, f\"image_{img_id}.jpg\")\n    picture_path = os.path.join(picture_dir, f\"image_{img_id}.jpg\")\n    return os.path.isfile(host_path) and os.path.isfile(picture_path)\n\n\n#data = data[data['id'].apply(images_exist)].reset_index(drop=True)\n\nprint(data)\ndata.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:20.731912Z","iopub.execute_input":"2025-07-08T11:00:20.732118Z","iopub.status.idle":"2025-07-08T11:00:24.847776Z","shell.execute_reply.started":"2025-07-08T11:00:20.732094Z","shell.execute_reply":"2025-07-08T11:00:24.847016Z"}},"outputs":[{"name":"stdout","text":"                 id   latitude  longitude  price  minimum_nights  \\\n0      1.867400e+04  41.405560   2.172620  179.0             1.0   \n1      2.319700e+04  41.412432   2.219750  251.0             3.0   \n2      3.271100e+04  41.405660   2.170150  104.0             1.0   \n3      3.424100e+04  41.380620   2.175170  157.0            31.0   \n4      3.498100e+04  41.379780   2.176230  401.0             5.0   \n...             ...        ...        ...    ...             ...   \n15268  1.368830e+18  41.387100   2.171690   69.0             1.0   \n15269  1.368843e+18  41.396902   2.175337   68.0            32.0   \n15270  1.368857e+18  41.394700   2.163284  206.0            31.0   \n15271  1.368915e+18  41.378330   2.163580   92.0             1.0   \n15272  1.368966e+18  41.390737   2.161145  154.0             3.0   \n\n       number_of_reviews  reviews_per_month  calculated_host_listings_count  \\\n0                   45.0           0.310000                            29.0   \n1                   82.0           0.480000                             1.0   \n2                  143.0           0.860000                             3.0   \n3                   25.0           0.140000                             3.0   \n4                  256.0           1.460000                             3.0   \n...                  ...                ...                             ...   \n15268                0.0           1.638309                            14.0   \n15269                0.0           1.638309                            29.0   \n15270                0.0           1.638309                           483.0   \n15271                0.0           1.638309                             1.0   \n15272                0.0           1.638309                             1.0   \n\n       availability_365  number_of_reviews_ltm  ...  comments_word_freq_iii  \\\n0                 147.0                    5.0  ...                     0.0   \n1                   0.0                    8.0  ...                     0.0   \n2                 107.0                   31.0  ...                     1.0   \n3                 327.0                   15.0  ...                     0.0   \n4                 191.0                   34.0  ...                     1.0   \n...                 ...                    ...  ...                     ...   \n15268               2.0                    0.0  ...                     0.0   \n15269             365.0                    0.0  ...                     0.0   \n15270             329.0                    0.0  ...                     0.0   \n15271               2.0                    0.0  ...                     0.0   \n15272              73.0                    0.0  ...                     0.0   \n\n       comments_word_freq_large  comments_word_freq_such  \\\n0                           3.0                      0.0   \n1                          10.0                      0.0   \n2                           0.0                      2.0   \n3                           1.0                      1.0   \n4                          12.0                      2.0   \n...                         ...                      ...   \n15268                       0.0                      0.0   \n15269                       0.0                      0.0   \n15270                       0.0                      0.0   \n15271                       0.0                      0.0   \n15272                       0.0                      0.0   \n\n       comments_word_freq_airport  comments_word_freq_sure  \\\n0                             0.0                      2.0   \n1                             0.0                      1.0   \n2                             0.0                      1.0   \n3                             0.0                      1.0   \n4                             2.0                     11.0   \n...                           ...                      ...   \n15268                         0.0                      0.0   \n15269                         0.0                      0.0   \n15270                         0.0                      0.0   \n15271                         0.0                      0.0   \n15272                         0.0                      0.0   \n\n       comments_word_freq_modern  comments_word_freq_find  \\\n0                            0.0                      2.0   \n1                            5.0                      1.0   \n2                            0.0                      1.0   \n3                            1.0                      2.0   \n4                            5.0                      6.0   \n...                          ...                      ...   \n15268                        0.0                      0.0   \n15269                        0.0                      0.0   \n15270                        0.0                      0.0   \n15271                        0.0                      0.0   \n15272                        0.0                      0.0   \n\n       comments_word_freq_floor  comments_word_freq_sur  \\\n0                           0.0                     3.0   \n1                           1.0                     5.0   \n2                           2.0                     7.0   \n3                           2.0                     2.0   \n4                           4.0                    16.0   \n...                         ...                     ...   \n15268                       0.0                     0.0   \n15269                       0.0                     0.0   \n15270                       0.0                     0.0   \n15271                       0.0                     0.0   \n15272                       0.0                     0.0   \n\n       comments_word_freq_outside  \n0                             4.0  \n1                             7.0  \n2                             0.0  \n3                             3.0  \n4                            11.0  \n...                           ...  \n15268                         0.0  \n15269                         0.0  \n15270                         0.0  \n15271                         0.0  \n15272                         0.0  \n\n[15273 rows x 1981 columns]\n","output_type":"stream"},{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"(15273, 1981)"},"metadata":{}}],"execution_count":34},{"cell_type":"code","source":"test_size = 0.2\ntrain_df, test_df = train_test_split(data, test_size=test_size, random_state=42)\n\n# Normalization stats from training data\n#train_mean = train_df.drop(target_clm, axis=1).mean().astype(np.float32).values\n#train_std = train_df.drop(target_clm, axis=1).std().replace(0, 1).astype(np.float32).values\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:24.849590Z","iopub.execute_input":"2025-07-08T11:00:24.849770Z","iopub.status.idle":"2025-07-08T11:00:24.989987Z","shell.execute_reply.started":"2025-07-08T11:00:24.849757Z","shell.execute_reply":"2025-07-08T11:00:24.989445Z"}},"outputs":[],"execution_count":35},{"cell_type":"markdown","source":"## Dataset","metadata":{}},{"cell_type":"code","source":"class ImageDataset(Dataset):\n    def __init__(self, dataframe, target_clm, image_dir_host, image_dir_picture, normalize=True, img_mean = None, img_std = None, tab_mean = None, tab_std = None ,transform=None):\n        self.data = dataframe\n        self.target_clm = target_clm\n        self.image_dir_host = image_dir_host\n        self.image_dir_picture = image_dir_picture\n        \n        self.transform = transform if transform else transforms.ToTensor()\n        self.normalize = normalize\n        self.img_mean = torch.tensor(img_mean).view(3, 1, 1) if img_mean is not None else None\n        self.img_std = torch.tensor(img_std).view(3, 1, 1) if img_std is not None else None\n        self.tab_mean = torch.tensor(tab_mean, dtype=torch.float32) if tab_mean is not None else None\n        self.tab_std = torch.tensor(tab_std, dtype=torch.float32) if tab_std is not None else None\n\n        self.tab_features = dataframe.drop(columns = [\"id\", target_clm]).to_numpy(dtype=np.float32)\n        self.targets = dataframe[target_clm].to_numpy\n\n        self.avg_img = Image.new('RGB', (128, 128), (int(0.485 * 255), int(0.456 * 255), int(0.406 * 255)))\n        \n    def __len__(self):\n        return len(self.data)\n\n    def __getitem__(self, idx):\n        row = self.data.iloc[idx]\n        img_id = int(row['id'])\n        target = data[self.target_clm].iloc[idx]\n\n        \n        img_path_host = os.path.join(self.image_dir_host, f\"image_{img_id}.jpg\")\n        img_path_picture = os.path.join(self.image_dir_picture, f\"image_{img_id}.jpg\")\n\n        img_host = None\n        img_picture = None\n\n        if not os.path.isfile(img_path_host):  \n            #avg_img = Image.new('RGB', (128, 128), (int(0.485 * 255), int(0.456 * 255), int(0.406 * 255)))\n            img_host = self.transform(self.avg_img)\n        else:\n            img_host = Image.open(img_path_host)\n            img_host = self.transform(img_host)\n            \n        if not os.path.isfile(img_path_picture):\n            img_picture = self.transform(self.avg_img)\n\n        else:\n            img_picture = Image.open(img_path_picture)\n            img_picture = self.transform(img_picture)\n\n        \n\n        x_tab = self.tab_features[idx]\n\n        if self.normalize:\n            if self.img_mean is not None and self.img_std is not None:\n                img_host = (img_host - self.img_mean) / self.img_std\n                img_picture = (img_picture - self.img_mean) / self.img_std \n            if self.tab_mean is not None and self.tab_std is not None:\n                x_tab = (x_tab - self.tab_mean.numpy()) / self.tab_std.numpy()\n\n        x_tab = torch.tensor(x_tab, dtype=torch.float32)\n        y = torch.tensor([target], dtype=torch.float32)\n                \n        \n        return (img_host, img_picture, x_tab), y\n\n\n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:24.990658Z","iopub.execute_input":"2025-07-08T11:00:24.990838Z","iopub.status.idle":"2025-07-08T11:00:25.001973Z","shell.execute_reply.started":"2025-07-08T11:00:24.990825Z","shell.execute_reply":"2025-07-08T11:00:25.001084Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"\n\n#typical for normal images\nimg_mean = [0.485, 0.456, 0.406]\nimg_std  = [0.229, 0.224, 0.225]\n\ntab_features = train_df.drop(columns=['id', target_clm])\n\ntab_mean = tab_features.mean().astype(np.float32).values\ntab_std = tab_features.std().replace(0, 1).astype(np.float32).values\n\ntransform = transforms.ToTensor()\n\ntrain_dataset_full = ImageDataset(train_df, target_clm, host_picture_dir, picture_dir, normalize = True, img_mean =  img_mean, img_std = img_std, tab_mean = tab_mean, tab_std = tab_std, transform = transform)\ntest_dataset = ImageDataset(test_df, target_clm, host_picture_dir, picture_dir, normalize = True, img_mean =  img_mean, img_std = img_std, tab_mean = tab_mean, tab_std = tab_std ,transform = transform)\n\n\n\ndef show_tensor_image(tensor, mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]):\n    # Clone to avoid modifying original tensor\n    tensor = tensor.clone().detach()\n\n    # Unnormalize\n    for t, m, s in zip(tensor, mean, std):\n        t.mul_(s).add_(m)\n\n    # Clip to [0, 1] range\n    tensor = tensor.clamp(0, 1)\n\n    # Convert to [H, W, C] for matplotlib\n    np_img = tensor.permute(1, 2, 0).cpu().numpy()\n\n    # Plot\n    plt.imshow(np_img)\n    plt.axis('off')\n    plt.show()\n\n(_,a,b),_ = train_dataset_full.__getitem__(1234)\n\nshow_tensor_image(a)\n\nprint(b.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:25.002752Z","iopub.execute_input":"2025-07-08T11:00:25.002957Z","iopub.status.idle":"2025-07-08T11:00:25.445929Z","shell.execute_reply.started":"2025-07-08T11:00:25.002943Z","shell.execute_reply":"2025-07-08T11:00:25.445271Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}},{"name":"stdout","text":"torch.Size([1979])\n","output_type":"stream"}],"execution_count":37},{"cell_type":"code","source":"#split train/val\ntorch.manual_seed(0)\nval_ratio = 0.1\ntrain_dataset, val_dataset = random_split(train_dataset_full, [1 - val_ratio, val_ratio])\n\n#DataLoaders\nbatch_size = 128\ntrain_loader = DataLoader(train_dataset, batch_size = batch_size, shuffle=True)\nval_loader = DataLoader(val_dataset, batch_size=batch_size)\ntest_loader = DataLoader(test_dataset, batch_size=batch_size)\n\nimages, targets = next(iter(train_loader))\n\nprint(images[0].shape)\nprint(images[1].shape)\nprint()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:25.446721Z","iopub.execute_input":"2025-07-08T11:00:25.446973Z","iopub.status.idle":"2025-07-08T11:00:26.224748Z","shell.execute_reply.started":"2025-07-08T11:00:25.446956Z","shell.execute_reply":"2025-07-08T11:00:26.224057Z"}},"outputs":[{"name":"stdout","text":"torch.Size([128, 3, 128, 128])\ntorch.Size([128, 3, 128, 128])\n\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"class ResNetBlock(nn.Module):\n    def __init__(self, channels):\n        super(ResNetBlock, self).__init__()\n        self.conv1 = torch.nn.Conv2d(channels, channels, kernel_size=3, stride=1, padding=1)\n        self.relu = torch.nn.ReLU(inplace=True)\n        self.conv2 = torch.nn.Conv2d(channels, channels, kernel_size=3, stride=1, padding=1)\n    def forward(self, x):\n        identity = x #(for resnet block adding)\n        out = self.relu(self.conv1(x))\n        out = self.conv2(out)\n        out += identity\n        out = self.relu(out)\n        return out","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:26.225465Z","iopub.execute_input":"2025-07-08T11:00:26.225737Z","iopub.status.idle":"2025-07-08T11:00:26.230931Z","shell.execute_reply.started":"2025-07-08T11:00:26.225705Z","shell.execute_reply":"2025-07-08T11:00:26.230208Z"}},"outputs":[],"execution_count":39},{"cell_type":"code","source":"#loosly based on AlexNet\n#based on resNet 12 https://www.researchgate.net/figure/The-structure-of-ResNet-12_fig1_329954455\nclass CNNBranch(nn.Module):\n    def __init__(self, in_channels=3, num_classes=96):\n        super(CNNBranch, self).__init__()\n\n        # self.feature_extractor = nn.Sequential(\n        #     torch.nn.Conv2d(in_channels = in_channels, out_channels=96, kernel_size=5), #-> 96x124x124\n        #     torch.nn.ReLU(),\n        #     torch.nn.AvgPool2d(kernel_size = 2), #-> 96x62x62\n        \n        #     torch.nn.Conv2d(in_channels = 96, out_channels = 256, kernel_size=3), #-> 256x60x60\n        #     torch.nn.ReLU(),\n        #     torch.nn.AvgPool2d(kernel_size = 2), #-> 256x30x30\n            \n        #     torch.nn.Conv2d(in_channels = 256, out_channels = 384, kernel_size=3), #-> 384x28x28\n        #     torch.nn.ReLU(),\n        #     torch.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=3), #-> 384x26x26\n        #     torch.nn.ReLU(),\n        #     torch.nn.Conv2d(in_channels=384, out_channels=256, kernel_size=3), #-> 256x24x24\n        #     torch.nn.ReLU(),\n        #     torch.nn.AvgPool2d(kernel_size = 2) #-> 256x12x12\n\n        # )\n\n        #inital conv and pooling\n        self.stem = nn.Sequential(\n            nn.Conv2d(in_channels = in_channels, out_channels=64, kernel_size=3, stride=2, padding=1),\n            nn.ReLU(inplace=True),\n            nn.MaxPool2d(kernel_size = 3, stride = 2, padding = 1)\n        )\n\n        #ResNet blocks\n        self.resnet_blocks = nn.Sequential(\n            ResNetBlock(64),\n            ResNetBlock(64),\n            ResNetBlock(64),\n            ResNetBlock(64),\n            ResNetBlock(64)\n        )\n        \n        # Global average pooling\n        self.global_pool = nn.AdaptiveAvgPool2d((1,1)) #Output: [B, 64, 1, 1]\n\n        # Fully connected Layer\n\n        self.classifier = nn.Linear(64,num_classes)\n    \n\n    \n    def forward(self, x):\n        x = self.stem(x)\n        x = self.resnet_blocks(x)\n        x = self.global_pool(x)\n        x = torch.flatten(x, 1)\n        x = self.classifier(x)\n        return x\n\n        \n    \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:26.231677Z","iopub.execute_input":"2025-07-08T11:00:26.231856Z","iopub.status.idle":"2025-07-08T11:00:26.248968Z","shell.execute_reply.started":"2025-07-08T11:00:26.231842Z","shell.execute_reply":"2025-07-08T11:00:26.248268Z"}},"outputs":[],"execution_count":40},{"cell_type":"code","source":"class PriceCNN(nn.Module):\n    def __init__(self):\n        super(PriceCNN, self).__init__()\n        self.interior_branch = CNNBranch()\n        self.host_branch = CNNBranch()\n\n        \n    def forward(self, interior_img, host_img):\n        f1 = self.interior_branch(interior_img)\n        f2 = self.host_branch(host_img)\n\n        combined = torch.cat((f1, f2), dim=1) #cat along channel axis\n        return combined.view(combined.size(0), -1) #flatten output\n    \n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:26.249667Z","iopub.execute_input":"2025-07-08T11:00:26.249862Z","iopub.status.idle":"2025-07-08T11:00:26.266738Z","shell.execute_reply.started":"2025-07-08T11:00:26.249848Z","shell.execute_reply":"2025-07-08T11:00:26.266048Z"}},"outputs":[],"execution_count":41},{"cell_type":"code","source":"class TabularNN(nn.Module):\n    def __init__(self, input_dim):\n        super(TabularNN, self).__init__()\n\n        self.mlp = nn.Sequential(\n            nn.Linear(input_dim, 1024),\n            nn.ReLU(),\n            nn.Linear(1024, 256),\n            nn.ReLU(),\n            nn.Linear(256, 32),\n            nn.ReLU()\n        )\n        \n    def forward(self, x):\n        return self.mlp(x)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:26.267473Z","iopub.execute_input":"2025-07-08T11:00:26.267709Z","iopub.status.idle":"2025-07-08T11:00:26.280914Z","shell.execute_reply.started":"2025-07-08T11:00:26.267694Z","shell.execute_reply":"2025-07-08T11:00:26.280339Z"}},"outputs":[],"execution_count":42},{"cell_type":"code","source":"class FullMultimodalModel(nn.Module):\n    def __init__(self, tab_input_dim):\n        super(FullMultimodalModel, self).__init__()\n        self.image_net = PriceCNN()\n        self.tab_net = TabularNN(tab_input_dim)\n\n        img_feature_dim = 2 * 96\n        tab_feature_dim = 32\n\n        self.regressor = nn.Sequential(\n            nn.Linear(img_feature_dim + tab_feature_dim, 512),\n            nn.ReLU(),\n            nn.Linear(512, 128),\n            nn.ReLU(),\n            nn.Linear(128,1)\n        )\n    def forward(self, tab_data, interior_img, host_img):\n        img_features = self.image_net(interior_img, host_img)\n        tab_features = self.tab_net(tab_data)\n\n        combined = torch.cat((img_features, tab_features), dim=1)\n        return self.regressor(combined)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:03:23.317464Z","iopub.execute_input":"2025-07-08T11:03:23.318003Z","iopub.status.idle":"2025-07-08T11:03:23.323035Z","shell.execute_reply.started":"2025-07-08T11:03:23.317982Z","shell.execute_reply":"2025-07-08T11:03:23.322231Z"}},"outputs":[],"execution_count":54},{"cell_type":"code","source":"# Device setup\ndevice = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n# Instantiate model\ninput_dim = train_df.drop(target_clm, axis=1).shape[1]\nmodel = FullMultimodalModel(tab_input_dim=train_df.drop([\"id\", target_clm], axis=1).shape[1])\nmodel.to(device)\n\nmodel = model.float()\n# Loss and optimizer\ncriterion = torch.nn.MSELoss()\n#criterion = torch.nn.BCEWithLogitsLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-5)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:03:26.320531Z","iopub.execute_input":"2025-07-08T11:03:26.320802Z","iopub.status.idle":"2025-07-08T11:03:26.470847Z","shell.execute_reply.started":"2025-07-08T11:03:26.320782Z","shell.execute_reply":"2025-07-08T11:03:26.470132Z"}},"outputs":[],"execution_count":55},{"cell_type":"code","source":"print(\"Any NaN in features? \", np.isnan(data.drop(target_clm, axis=1).to_numpy()).any())\nprint(\"Any NaN in target? \", np.isnan(data[target_clm].to_numpy()).any())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:26.823319Z","iopub.execute_input":"2025-07-08T11:00:26.823574Z","iopub.status.idle":"2025-07-08T11:00:26.965639Z","shell.execute_reply.started":"2025-07-08T11:00:26.823549Z","shell.execute_reply":"2025-07-08T11:00:26.964980Z"}},"outputs":[{"name":"stdout","text":"Any NaN in features?  False\nAny NaN in target?  False\n","output_type":"stream"}],"execution_count":45},{"cell_type":"code","source":"def train(dataloader, optimizer, model, loss_fn, device, master_bar):\n    model.train()\n    train_loss = 0.0\n    for batch in dataloader:\n        (interior_img, host_img, tab), price = batch\n        interior_img = interior_img.to(device)\n        host_img = host_img.to(device)\n        tab = tab.to(device)\n        price = price.to(device)\n        #price = price.long()\n\n        #Forward pass\n        optimizer.zero_grad()\n        outputs = model(tab, interior_img, host_img)\n        loss = loss_fn(outputs, price)\n        train_loss += loss.item()\n        \n        #Backward pass\n        loss.backward()\n        optimizer.step()\n\n\n        master_bar.set_description(f\"Epoch {master_bar.n + 1} (Train)\")\n        master_bar.set_postfix(loss=f\"{loss.item():.3f}\")\n\n    return train_loss / len(dataloader)\n\n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:26.966392Z","iopub.execute_input":"2025-07-08T11:00:26.966604Z","iopub.status.idle":"2025-07-08T11:00:26.971625Z","shell.execute_reply.started":"2025-07-08T11:00:26.966589Z","shell.execute_reply":"2025-07-08T11:00:26.970961Z"}},"outputs":[],"execution_count":46},{"cell_type":"code","source":"def validate(dataloader, model, loss_fn, device, master_bar):\n    model.eval()\n    val_loss = 0\n\n    with torch.no_grad():\n        for batch in dataloader:\n            (interior_img, host_img, tab), price = batch\n            interior_img, host_img, tab, price = interior_img.to(device), host_img.to(device), tab.to(device),price.to(device)\n\n            #validate\n            outputs = model(tab, interior_img, host_img)\n            loss = loss_fn(outputs, price)\n            val_loss += loss.item()\n\n            master_bar.set_description(f\"Epoch {master_bar.n + 1} (Validate)\")\n            master_bar.set_postfix(loss=f\"{loss.item():.3f}\")\n    \n    return val_loss / len(dataloader)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:26.972254Z","iopub.execute_input":"2025-07-08T11:00:26.972499Z","iopub.status.idle":"2025-07-08T11:00:26.992626Z","shell.execute_reply.started":"2025-07-08T11:00:26.972475Z","shell.execute_reply":"2025-07-08T11:00:26.991996Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"def run_training(model, optimizer, loss_function, device, num_epochs, train_dataloader, val_dataloader):\n    train_losses = []\n    val_losses = []\n\n    master_bar = trange(num_epochs, desc=\"Training Epochs\")\n    for epoch in master_bar:\n        train_loss = train(train_dataloader, optimizer, model, loss_function, device, master_bar)\n        val_loss = validate(val_dataloader, model, loss_function, device, master_bar)\n\n        train_losses.append(train_loss)\n        val_losses.append(val_loss)\n\n    return train_losses, val_losses","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:26.993279Z","iopub.execute_input":"2025-07-08T11:00:26.993482Z","iopub.status.idle":"2025-07-08T11:00:27.005801Z","shell.execute_reply.started":"2025-07-08T11:00:26.993468Z","shell.execute_reply":"2025-07-08T11:00:27.005133Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"def evaluate_model(model, dataloader, device):\n    model.eval()\n    model.to(device)\n    absolute_errors = []\n    raw_errors = []\n\n    with torch.no_grad():\n        for batch in dataloader:\n            # Assumes batch is (inputs, targets)\n            (interior_img, host_img, tab), targets = batch\n            interior_img, host_img, tab, targets = interior_img.to(device), host_img.to(device), tab.to(device) ,targets.to(device)\n\n            outputs = model(tab, interior_img, host_img)\n            abs_error = abs(outputs - targets)\n            raw_error = outputs - targets\n            absolute_errors.extend(abs_error.cpu().numpy())\n            raw_errors.extend(raw_error.cpu().numpy())\n\n    return np.array(absolute_errors), np.array(raw_errors)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:27.006424Z","iopub.execute_input":"2025-07-08T11:00:27.006604Z","iopub.status.idle":"2025-07-08T11:00:27.023777Z","shell.execute_reply.started":"2025-07-08T11:00:27.006590Z","shell.execute_reply":"2025-07-08T11:00:27.023000Z"}},"outputs":[],"execution_count":49},{"cell_type":"code","source":"def plot_accuracy(errors, bins = 10, min_range = None, max_range = None, title=\"\"):\n\n    if min_range is None:\n        min_range = min(errors)\n    if max_range is None:\n        max_range = max(errors)\n\n    counts, bin_edges = np.histogram(errors, bins=bins, range=(min_range, max_range))\n\n    percentages = 100 * counts / counts.sum()\n\n    bin_widths = bin_edges[1:] - bin_edges[:-1]\n\n    plt.bar(bin_edges[:-1], percentages, width = bin_widths, align = 'edge', edgecolor='black')\n    plt.xlabel(\"Absolute Error\")\n    plt.ylabel(\"Percentage (%)\")\n    plt.title(\"Percentage Distribution of \" + title)\n    \n    #plt.hist(errors, bins, range=(min_range, max_range), density=True)\n    plt.grid(True)\n    plt.show() ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:27.024430Z","iopub.execute_input":"2025-07-08T11:00:27.024677Z","iopub.status.idle":"2025-07-08T11:00:27.036000Z","shell.execute_reply.started":"2025-07-08T11:00:27.024655Z","shell.execute_reply":"2025-07-08T11:00:27.035413Z"}},"outputs":[],"execution_count":50},{"cell_type":"code","source":"epochs= 15\n\nlosses = run_training(model, optimizer, criterion, device, epochs, train_loader, val_loader)\n\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:03:30.766184Z","iopub.execute_input":"2025-07-08T11:03:30.766745Z"}},"outputs":[{"name":"stderr","text":"Epoch 2 (Train):   7%|▋         | 1/15 [02:44<28:58, 124.17s/it, loss=185103.672]  ","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"#evaluate\nabs_err, raw_err = evaluate_model(model, test_loader, device)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:27.574086Z","iopub.status.idle":"2025-07-08T11:00:27.574391Z","shell.execute_reply.started":"2025-07-08T11:00:27.574213Z","shell.execute_reply":"2025-07-08T11:00:27.574227Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plot_accuracy(abs_err, bins = 10, min_range = 0, max_range = 500, title=\"abs errors\")\nplot_accuracy(raw_err, bins = 20, min_range = -500, max_range = 500, title=\"all errors\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:27.575426Z","iopub.status.idle":"2025-07-08T11:00:27.575711Z","shell.execute_reply.started":"2025-07-08T11:00:27.575573Z","shell.execute_reply":"2025-07-08T11:00:27.575587Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def plotLosses(losses, title = \"\"):\n    plt.plot(range(1, len(losses) + 1),losses, label=title + \" loss\")\n    plt.legend()\n    plt.title(title + \" loss per epoch\")\n    plt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:27.576950Z","iopub.status.idle":"2025-07-08T11:00:27.577207Z","shell.execute_reply.started":"2025-07-08T11:00:27.577095Z","shell.execute_reply":"2025-07-08T11:00:27.577108Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plotLosses(losses[0], title=\"training\")\nplotLosses(losses[1], title=\"validation\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-08T11:00:27.578050Z","iopub.status.idle":"2025-07-08T11:00:27.578251Z","shell.execute_reply.started":"2025-07-08T11:00:27.578157Z","shell.execute_reply":"2025-07-08T11:00:27.578166Z"}},"outputs":[],"execution_count":null}]}