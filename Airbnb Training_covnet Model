{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c993974d",
   "metadata": {
    "papermill": {
     "duration": 0.004909,
     "end_time": "2025-07-08T11:21:05.785094",
     "exception": false,
     "start_time": "2025-07-08T11:21:05.780185",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Training the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cf79ac79",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:05.794889Z",
     "iopub.status.busy": "2025-07-08T11:21:05.794273Z",
     "iopub.status.idle": "2025-07-08T11:21:05.800225Z",
     "shell.execute_reply": "2025-07-08T11:21:05.799541Z"
    },
    "papermill": {
     "duration": 0.012028,
     "end_time": "2025-07-08T11:21:05.801320",
     "exception": false,
     "start_time": "2025-07-08T11:21:05.789292",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "#for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "#    for filename in filenames:\n",
    "        #print(os.path.join(dirname, filename))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ee58164b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:05.810110Z",
     "iopub.status.busy": "2025-07-08T11:21:05.809900Z",
     "iopub.status.idle": "2025-07-08T11:21:17.761349Z",
     "shell.execute_reply": "2025-07-08T11:21:17.760761Z"
    },
    "papermill": {
     "duration": 11.95742,
     "end_time": "2025-07-08T11:21:17.762735",
     "exception": false,
     "start_time": "2025-07-08T11:21:05.805315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "from torch import nn\n",
    "from torch.utils.data import Dataset, DataLoader, random_split\n",
    "from PIL import Image\n",
    "import torchvision.transforms as transforms\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.impute import SimpleImputer\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#progress bar\n",
    "from tqdm import trange\n",
    "from tqdm import tqdm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "82eddf8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:17.772019Z",
     "iopub.status.busy": "2025-07-08T11:21:17.771675Z",
     "iopub.status.idle": "2025-07-08T11:21:17.775054Z",
     "shell.execute_reply": "2025-07-08T11:21:17.774538Z"
    },
    "papermill": {
     "duration": 0.009158,
     "end_time": "2025-07-08T11:21:17.776111",
     "exception": false,
     "start_time": "2025-07-08T11:21:17.766953",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "torch.set_default_dtype(torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aeb01628",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:17.784809Z",
     "iopub.status.busy": "2025-07-08T11:21:17.784598Z",
     "iopub.status.idle": "2025-07-08T11:21:17.877385Z",
     "shell.execute_reply": "2025-07-08T11:21:17.876574Z"
    },
    "papermill": {
     "duration": 0.098404,
     "end_time": "2025-07-08T11:21:17.878585",
     "exception": false,
     "start_time": "2025-07-08T11:21:17.780181",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using device cuda:0\n"
     ]
    }
   ],
   "source": [
    "use_cuda = True\n",
    "use_cuda = False if not use_cuda else torch.cuda.is_available()\n",
    "device = torch.device('cuda:0' if use_cuda else 'cpu')\n",
    "torch.cuda.get_device_name(device) if use_cuda else 'cpu'\n",
    "print('Using device', device)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "add6b0ae",
   "metadata": {
    "papermill": {
     "duration": 0.003967,
     "end_time": "2025-07-08T11:21:17.886775",
     "exception": false,
     "start_time": "2025-07-08T11:21:17.882808",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Loading and preparing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "95750f05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:17.895998Z",
     "iopub.status.busy": "2025-07-08T11:21:17.895757Z",
     "iopub.status.idle": "2025-07-08T11:21:22.836580Z",
     "shell.execute_reply": "2025-07-08T11:21:22.835837Z"
    },
    "papermill": {
     "duration": 4.946932,
     "end_time": "2025-07-08T11:21:22.837769",
     "exception": false,
     "start_time": "2025-07-08T11:21:17.890837",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                 id   latitude  longitude  price  minimum_nights  \\\n",
      "0      1.867400e+04  41.405560   2.172620  179.0             1.0   \n",
      "1      2.319700e+04  41.412432   2.219750  251.0             3.0   \n",
      "2      3.271100e+04  41.405660   2.170150  104.0             1.0   \n",
      "3      3.424100e+04  41.380620   2.175170  157.0            31.0   \n",
      "4      3.498100e+04  41.379780   2.176230  401.0             5.0   \n",
      "...             ...        ...        ...    ...             ...   \n",
      "15268  1.368830e+18  41.387100   2.171690   69.0             1.0   \n",
      "15269  1.368843e+18  41.396902   2.175337   68.0            32.0   \n",
      "15270  1.368857e+18  41.394700   2.163284  206.0            31.0   \n",
      "15271  1.368915e+18  41.378330   2.163580   92.0             1.0   \n",
      "15272  1.368966e+18  41.390737   2.161145  154.0             3.0   \n",
      "\n",
      "       number_of_reviews  reviews_per_month  calculated_host_listings_count  \\\n",
      "0                   45.0           0.310000                            29.0   \n",
      "1                   82.0           0.480000                             1.0   \n",
      "2                  143.0           0.860000                             3.0   \n",
      "3                   25.0           0.140000                             3.0   \n",
      "4                  256.0           1.460000                             3.0   \n",
      "...                  ...                ...                             ...   \n",
      "15268                0.0           1.638309                            14.0   \n",
      "15269                0.0           1.638309                            29.0   \n",
      "15270                0.0           1.638309                           483.0   \n",
      "15271                0.0           1.638309                             1.0   \n",
      "15272                0.0           1.638309                             1.0   \n",
      "\n",
      "       availability_365  number_of_reviews_ltm  ...  comments_word_freq_iii  \\\n",
      "0                 147.0                    5.0  ...                     0.0   \n",
      "1                   0.0                    8.0  ...                     0.0   \n",
      "2                 107.0                   31.0  ...                     1.0   \n",
      "3                 327.0                   15.0  ...                     0.0   \n",
      "4                 191.0                   34.0  ...                     1.0   \n",
      "...                 ...                    ...  ...                     ...   \n",
      "15268               2.0                    0.0  ...                     0.0   \n",
      "15269             365.0                    0.0  ...                     0.0   \n",
      "15270             329.0                    0.0  ...                     0.0   \n",
      "15271               2.0                    0.0  ...                     0.0   \n",
      "15272              73.0                    0.0  ...                     0.0   \n",
      "\n",
      "       comments_word_freq_large  comments_word_freq_such  \\\n",
      "0                           3.0                      0.0   \n",
      "1                          10.0                      0.0   \n",
      "2                           0.0                      2.0   \n",
      "3                           1.0                      1.0   \n",
      "4                          12.0                      2.0   \n",
      "...                         ...                      ...   \n",
      "15268                       0.0                      0.0   \n",
      "15269                       0.0                      0.0   \n",
      "15270                       0.0                      0.0   \n",
      "15271                       0.0                      0.0   \n",
      "15272                       0.0                      0.0   \n",
      "\n",
      "       comments_word_freq_airport  comments_word_freq_sure  \\\n",
      "0                             0.0                      2.0   \n",
      "1                             0.0                      1.0   \n",
      "2                             0.0                      1.0   \n",
      "3                             0.0                      1.0   \n",
      "4                             2.0                     11.0   \n",
      "...                           ...                      ...   \n",
      "15268                         0.0                      0.0   \n",
      "15269                         0.0                      0.0   \n",
      "15270                         0.0                      0.0   \n",
      "15271                         0.0                      0.0   \n",
      "15272                         0.0                      0.0   \n",
      "\n",
      "       comments_word_freq_modern  comments_word_freq_find  \\\n",
      "0                            0.0                      2.0   \n",
      "1                            5.0                      1.0   \n",
      "2                            0.0                      1.0   \n",
      "3                            1.0                      2.0   \n",
      "4                            5.0                      6.0   \n",
      "...                          ...                      ...   \n",
      "15268                        0.0                      0.0   \n",
      "15269                        0.0                      0.0   \n",
      "15270                        0.0                      0.0   \n",
      "15271                        0.0                      0.0   \n",
      "15272                        0.0                      0.0   \n",
      "\n",
      "       comments_word_freq_floor  comments_word_freq_sur  \\\n",
      "0                           0.0                     3.0   \n",
      "1                           1.0                     5.0   \n",
      "2                           2.0                     7.0   \n",
      "3                           2.0                     2.0   \n",
      "4                           4.0                    16.0   \n",
      "...                         ...                     ...   \n",
      "15268                       0.0                     0.0   \n",
      "15269                       0.0                     0.0   \n",
      "15270                       0.0                     0.0   \n",
      "15271                       0.0                     0.0   \n",
      "15272                       0.0                     0.0   \n",
      "\n",
      "       comments_word_freq_outside  \n",
      "0                             4.0  \n",
      "1                             7.0  \n",
      "2                             0.0  \n",
      "3                             3.0  \n",
      "4                            11.0  \n",
      "...                           ...  \n",
      "15268                         0.0  \n",
      "15269                         0.0  \n",
      "15270                         0.0  \n",
      "15271                         0.0  \n",
      "15272                         0.0  \n",
      "\n",
      "[15273 rows x 1981 columns]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(15273, 1981)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Load and filter data\n",
    "data = pd.read_csv(\"/kaggle/input/airbnbdata-barcelona/listing_data.csv\")\n",
    "data = data.select_dtypes(exclude=['object', 'string'])\n",
    "#data = data[[\"id\",\"price\"]]\n",
    "\n",
    "# Define target column\n",
    "target_clm = \"price\"\n",
    "\n",
    "# Drop rows with missing target and missing id\n",
    "data = data.dropna(subset=[target_clm, \"id\"])\n",
    "\n",
    "data = data.select_dtypes(exclude=['object', 'string'])\n",
    "#data = data.drop(\"id\", axis=1)\n",
    "\n",
    "# Create an imputer that fills NaNs with the mean of each column\n",
    "imputer = SimpleImputer(strategy='mean')\n",
    "\n",
    "# Fit the imputer on your data and transform it\n",
    "data_imputed = imputer.fit_transform(data)\n",
    "\n",
    "# Convert back to DataFrame to keep column names\n",
    "data = pd.DataFrame(data_imputed, columns=data.columns)  \n",
    "\n",
    "picture_dir = \"/kaggle/input/airbnbdata-barcelona/picture_url_128x128/picture_url_128x128\"\n",
    "host_picture_dir = \"/kaggle/input/airbnbdata-barcelona/host_picture_url_128x128/host_picture_url_128x128\"\n",
    "\n",
    "def images_exist(img_id):\n",
    "    img_id = int(img_id)\n",
    "    host_path = os.path.join(host_picture_dir, f\"image_{img_id}.jpg\")\n",
    "    picture_path = os.path.join(picture_dir, f\"image_{img_id}.jpg\")\n",
    "    return os.path.isfile(host_path) and os.path.isfile(picture_path)\n",
    "\n",
    "\n",
    "#data = data[data['id'].apply(images_exist)].reset_index(drop=True)\n",
    "\n",
    "print(data)\n",
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "edfc8398",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:22.848254Z",
     "iopub.status.busy": "2025-07-08T11:21:22.847682Z",
     "iopub.status.idle": "2025-07-08T11:21:22.978147Z",
     "shell.execute_reply": "2025-07-08T11:21:22.977274Z"
    },
    "papermill": {
     "duration": 0.137163,
     "end_time": "2025-07-08T11:21:22.979586",
     "exception": false,
     "start_time": "2025-07-08T11:21:22.842423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_size = 0.2\n",
    "train_df, test_df = train_test_split(data, test_size=test_size, random_state=42)\n",
    "\n",
    "# Normalization stats from training data\n",
    "#train_mean = train_df.drop(target_clm, axis=1).mean().astype(np.float32).values\n",
    "#train_std = train_df.drop(target_clm, axis=1).std().replace(0, 1).astype(np.float32).values\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0652e4a",
   "metadata": {
    "papermill": {
     "duration": 0.004014,
     "end_time": "2025-07-08T11:21:22.988253",
     "exception": false,
     "start_time": "2025-07-08T11:21:22.984239",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8a5f8184",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:22.998048Z",
     "iopub.status.busy": "2025-07-08T11:21:22.997817Z",
     "iopub.status.idle": "2025-07-08T11:21:23.007165Z",
     "shell.execute_reply": "2025-07-08T11:21:23.006432Z"
    },
    "papermill": {
     "duration": 0.015505,
     "end_time": "2025-07-08T11:21:23.008265",
     "exception": false,
     "start_time": "2025-07-08T11:21:22.992760",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class ImageDataset(Dataset):\n",
    "    def __init__(self, dataframe, target_clm, image_dir_host, image_dir_picture, normalize=True, img_mean = None, img_std = None, tab_mean = None, tab_std = None ,transform=None):\n",
    "        self.data = dataframe\n",
    "        self.target_clm = target_clm\n",
    "        self.image_dir_host = image_dir_host\n",
    "        self.image_dir_picture = image_dir_picture\n",
    "        \n",
    "        self.transform = transform if transform else transforms.ToTensor()\n",
    "        self.normalize = normalize\n",
    "        self.img_mean = torch.tensor(img_mean).view(3, 1, 1) if img_mean is not None else None\n",
    "        self.img_std = torch.tensor(img_std).view(3, 1, 1) if img_std is not None else None\n",
    "        self.tab_mean = torch.tensor(tab_mean, dtype=torch.float32) if tab_mean is not None else None\n",
    "        self.tab_std = torch.tensor(tab_std, dtype=torch.float32) if tab_std is not None else None\n",
    "\n",
    "        self.tab_features = dataframe.drop(columns = [\"id\", target_clm]).to_numpy(dtype=np.float32)\n",
    "        self.targets = dataframe[target_clm].to_numpy\n",
    "\n",
    "        self.avg_img = Image.new('RGB', (128, 128), (int(0.485 * 255), int(0.456 * 255), int(0.406 * 255)))\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.data)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        row = self.data.iloc[idx]\n",
    "        img_id = int(row['id'])\n",
    "        target = data[self.target_clm].iloc[idx]\n",
    "\n",
    "        \n",
    "        img_path_host = os.path.join(self.image_dir_host, f\"image_{img_id}.jpg\")\n",
    "        img_path_picture = os.path.join(self.image_dir_picture, f\"image_{img_id}.jpg\")\n",
    "\n",
    "        img_host = None\n",
    "        img_picture = None\n",
    "\n",
    "        if not os.path.isfile(img_path_host):  \n",
    "            #avg_img = Image.new('RGB', (128, 128), (int(0.485 * 255), int(0.456 * 255), int(0.406 * 255)))\n",
    "            img_host = self.transform(self.avg_img)\n",
    "        else:\n",
    "            img_host = Image.open(img_path_host)\n",
    "            img_host = self.transform(img_host)\n",
    "            \n",
    "        if not os.path.isfile(img_path_picture):\n",
    "            img_picture = self.transform(self.avg_img)\n",
    "\n",
    "        else:\n",
    "            img_picture = Image.open(img_path_picture)\n",
    "            img_picture = self.transform(img_picture)\n",
    "\n",
    "        \n",
    "\n",
    "        x_tab = self.tab_features[idx]\n",
    "\n",
    "        if self.normalize:\n",
    "            if self.img_mean is not None and self.img_std is not None:\n",
    "                img_host = (img_host - self.img_mean) / self.img_std\n",
    "                img_picture = (img_picture - self.img_mean) / self.img_std \n",
    "            if self.tab_mean is not None and self.tab_std is not None:\n",
    "                x_tab = (x_tab - self.tab_mean.numpy()) / self.tab_std.numpy()\n",
    "\n",
    "        x_tab = torch.tensor(x_tab, dtype=torch.float32)\n",
    "        y = torch.tensor([target], dtype=torch.float32)\n",
    "                \n",
    "        \n",
    "        return (img_host, img_picture, x_tab), y\n",
    "\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "10f961f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:23.017201Z",
     "iopub.status.busy": "2025-07-08T11:21:23.016985Z",
     "iopub.status.idle": "2025-07-08T11:21:23.489231Z",
     "shell.execute_reply": "2025-07-08T11:21:23.488462Z"
    },
    "papermill": {
     "duration": 0.478026,
     "end_time": "2025-07-08T11:21:23.490356",
     "exception": false,
     "start_time": "2025-07-08T11:21:23.012330",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([1979])\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "#typical for normal images\n",
    "img_mean = [0.485, 0.456, 0.406]\n",
    "img_std  = [0.229, 0.224, 0.225]\n",
    "\n",
    "tab_features = train_df.drop(columns=['id', target_clm])\n",
    "\n",
    "tab_mean = tab_features.mean().astype(np.float32).values\n",
    "tab_std = tab_features.std().replace(0, 1).astype(np.float32).values\n",
    "\n",
    "transform = transforms.ToTensor()\n",
    "\n",
    "train_dataset_full = ImageDataset(train_df, target_clm, host_picture_dir, picture_dir, normalize = True, img_mean =  img_mean, img_std = img_std, tab_mean = tab_mean, tab_std = tab_std, transform = transform)\n",
    "test_dataset = ImageDataset(test_df, target_clm, host_picture_dir, picture_dir, normalize = True, img_mean =  img_mean, img_std = img_std, tab_mean = tab_mean, tab_std = tab_std ,transform = transform)\n",
    "\n",
    "\n",
    "\n",
    "def show_tensor_image(tensor, mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]):\n",
    "    # Clone to avoid modifying original tensor\n",
    "    tensor = tensor.clone().detach()\n",
    "\n",
    "    # Unnormalize\n",
    "    for t, m, s in zip(tensor, mean, std):\n",
    "        t.mul_(s).add_(m)\n",
    "\n",
    "    # Clip to [0, 1] range\n",
    "    tensor = tensor.clamp(0, 1)\n",
    "\n",
    "    # Convert to [H, W, C] for matplotlib\n",
    "    np_img = tensor.permute(1, 2, 0).cpu().numpy()\n",
    "\n",
    "    # Plot\n",
    "    plt.imshow(np_img)\n",
    "    plt.axis('off')\n",
    "    plt.show()\n",
    "\n",
    "(_,a,b),_ = train_dataset_full.__getitem__(1234)\n",
    "\n",
    "show_tensor_image(a)\n",
    "\n",
    "print(b.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "f268fd45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:23.501245Z",
     "iopub.status.busy": "2025-07-08T11:21:23.500744Z",
     "iopub.status.idle": "2025-07-08T11:21:24.082526Z",
     "shell.execute_reply": "2025-07-08T11:21:24.081685Z"
    },
    "papermill": {
     "duration": 0.588415,
     "end_time": "2025-07-08T11:21:24.083752",
     "exception": false,
     "start_time": "2025-07-08T11:21:23.495337",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([128, 3, 128, 128])\n",
      "torch.Size([128, 3, 128, 128])\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#split train/val\n",
    "torch.manual_seed(0)\n",
    "val_ratio = 0.1\n",
    "train_dataset, val_dataset = random_split(train_dataset_full, [1 - val_ratio, val_ratio])\n",
    "\n",
    "#DataLoaders\n",
    "batch_size = 128\n",
    "train_loader = DataLoader(train_dataset, batch_size = batch_size, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=batch_size)\n",
    "test_loader = DataLoader(test_dataset, batch_size=batch_size)\n",
    "\n",
    "images, targets = next(iter(train_loader))\n",
    "\n",
    "print(images[0].shape)\n",
    "print(images[1].shape)\n",
    "print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "74e4bf57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.096050Z",
     "iopub.status.busy": "2025-07-08T11:21:24.095843Z",
     "iopub.status.idle": "2025-07-08T11:21:24.100437Z",
     "shell.execute_reply": "2025-07-08T11:21:24.099964Z"
    },
    "papermill": {
     "duration": 0.011555,
     "end_time": "2025-07-08T11:21:24.101434",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.089879",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class ResNetBlock(nn.Module):\n",
    "    def __init__(self, channels):\n",
    "        super(ResNetBlock, self).__init__()\n",
    "        self.conv1 = torch.nn.Conv2d(channels, channels, kernel_size=3, stride=1, padding=1)\n",
    "        self.relu = torch.nn.ReLU(inplace=True)\n",
    "        self.conv2 = torch.nn.Conv2d(channels, channels, kernel_size=3, stride=1, padding=1)\n",
    "    def forward(self, x):\n",
    "        identity = x #(for resnet block adding)\n",
    "        out = self.relu(self.conv1(x))\n",
    "        out = self.conv2(out)\n",
    "        out += identity\n",
    "        out = self.relu(out)\n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "19eeca7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.111606Z",
     "iopub.status.busy": "2025-07-08T11:21:24.111353Z",
     "iopub.status.idle": "2025-07-08T11:21:24.116651Z",
     "shell.execute_reply": "2025-07-08T11:21:24.116179Z"
    },
    "papermill": {
     "duration": 0.011568,
     "end_time": "2025-07-08T11:21:24.117589",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.106021",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#loosly based on AlexNet\n",
    "#based on resNet 12 https://www.researchgate.net/figure/The-structure-of-ResNet-12_fig1_329954455\n",
    "class CNNBranch(nn.Module):\n",
    "    def __init__(self, in_channels=3, num_classes=96):\n",
    "        super(CNNBranch, self).__init__()\n",
    "\n",
    "        # self.feature_extractor = nn.Sequential(\n",
    "        #     torch.nn.Conv2d(in_channels = in_channels, out_channels=96, kernel_size=5), #-> 96x124x124\n",
    "        #     torch.nn.ReLU(),\n",
    "        #     torch.nn.AvgPool2d(kernel_size = 2), #-> 96x62x62\n",
    "        \n",
    "        #     torch.nn.Conv2d(in_channels = 96, out_channels = 256, kernel_size=3), #-> 256x60x60\n",
    "        #     torch.nn.ReLU(),\n",
    "        #     torch.nn.AvgPool2d(kernel_size = 2), #-> 256x30x30\n",
    "            \n",
    "        #     torch.nn.Conv2d(in_channels = 256, out_channels = 384, kernel_size=3), #-> 384x28x28\n",
    "        #     torch.nn.ReLU(),\n",
    "        #     torch.nn.Conv2d(in_channels=384, out_channels=384, kernel_size=3), #-> 384x26x26\n",
    "        #     torch.nn.ReLU(),\n",
    "        #     torch.nn.Conv2d(in_channels=384, out_channels=256, kernel_size=3), #-> 256x24x24\n",
    "        #     torch.nn.ReLU(),\n",
    "        #     torch.nn.AvgPool2d(kernel_size = 2) #-> 256x12x12\n",
    "\n",
    "        # )\n",
    "\n",
    "        #inital conv and pooling\n",
    "        self.stem = nn.Sequential(\n",
    "            nn.Conv2d(in_channels = in_channels, out_channels=64, kernel_size=3, stride=2, padding=1),\n",
    "            nn.ReLU(inplace=True),\n",
    "            nn.MaxPool2d(kernel_size = 3, stride = 2, padding = 1)\n",
    "        )\n",
    "\n",
    "        #ResNet blocks\n",
    "        self.resnet_blocks = nn.Sequential(\n",
    "            ResNetBlock(64),\n",
    "            ResNetBlock(64),\n",
    "            ResNetBlock(64),\n",
    "            ResNetBlock(64),\n",
    "            ResNetBlock(64)\n",
    "        )\n",
    "        \n",
    "        # Global average pooling\n",
    "        self.global_pool = nn.AdaptiveAvgPool2d((1,1)) #Output: [B, 64, 1, 1]\n",
    "\n",
    "        # Fully connected Layer\n",
    "\n",
    "        self.classifier = nn.Linear(64,num_classes)\n",
    "    \n",
    "\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = self.stem(x)\n",
    "        x = self.resnet_blocks(x)\n",
    "        x = self.global_pool(x)\n",
    "        x = torch.flatten(x, 1)\n",
    "        x = self.classifier(x)\n",
    "        return x\n",
    "\n",
    "        \n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "01e29fb2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.127669Z",
     "iopub.status.busy": "2025-07-08T11:21:24.127246Z",
     "iopub.status.idle": "2025-07-08T11:21:24.131442Z",
     "shell.execute_reply": "2025-07-08T11:21:24.130761Z"
    },
    "papermill": {
     "duration": 0.010392,
     "end_time": "2025-07-08T11:21:24.132543",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.122151",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class PriceCNN(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(PriceCNN, self).__init__()\n",
    "        self.interior_branch = CNNBranch()\n",
    "        self.host_branch = CNNBranch()\n",
    "\n",
    "        \n",
    "    def forward(self, interior_img, host_img):\n",
    "        f1 = self.interior_branch(interior_img)\n",
    "        f2 = self.host_branch(host_img)\n",
    "\n",
    "        combined = torch.cat((f1, f2), dim=1) #cat along channel axis\n",
    "        return combined.view(combined.size(0), -1) #flatten output\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cb8b6dfe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.142495Z",
     "iopub.status.busy": "2025-07-08T11:21:24.142321Z",
     "iopub.status.idle": "2025-07-08T11:21:24.146150Z",
     "shell.execute_reply": "2025-07-08T11:21:24.145630Z"
    },
    "papermill": {
     "duration": 0.010105,
     "end_time": "2025-07-08T11:21:24.147156",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.137051",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class TabularNN(nn.Module):\n",
    "    def __init__(self, input_dim):\n",
    "        super(TabularNN, self).__init__()\n",
    "\n",
    "        self.mlp = nn.Sequential(\n",
    "            nn.Linear(input_dim, 1024),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(1024, 256),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(256, 32),\n",
    "            nn.ReLU()\n",
    "        )\n",
    "        \n",
    "    def forward(self, x):\n",
    "        return self.mlp(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6531085d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.157207Z",
     "iopub.status.busy": "2025-07-08T11:21:24.156977Z",
     "iopub.status.idle": "2025-07-08T11:21:24.162159Z",
     "shell.execute_reply": "2025-07-08T11:21:24.161463Z"
    },
    "papermill": {
     "duration": 0.011591,
     "end_time": "2025-07-08T11:21:24.163330",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.151739",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class FullMultimodalModel(nn.Module):\n",
    "    def __init__(self, tab_input_dim):\n",
    "        super(FullMultimodalModel, self).__init__()\n",
    "        self.image_net = PriceCNN()\n",
    "        self.tab_net = TabularNN(tab_input_dim)\n",
    "\n",
    "        img_feature_dim = 2 * 96\n",
    "        tab_feature_dim = 32\n",
    "\n",
    "        self.regressor = nn.Sequential(\n",
    "            nn.Linear(img_feature_dim + tab_feature_dim, 512),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(512, 128),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(128,1)\n",
    "        )\n",
    "    def forward(self, tab_data, interior_img, host_img):\n",
    "        img_features = self.image_net(interior_img, host_img)\n",
    "        tab_features = self.tab_net(tab_data)\n",
    "\n",
    "        combined = torch.cat((img_features, tab_features), dim=1)\n",
    "        return self.regressor(combined)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a8394395",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.173270Z",
     "iopub.status.busy": "2025-07-08T11:21:24.172879Z",
     "iopub.status.idle": "2025-07-08T11:21:24.448272Z",
     "shell.execute_reply": "2025-07-08T11:21:24.447711Z"
    },
    "papermill": {
     "duration": 0.281717,
     "end_time": "2025-07-08T11:21:24.449641",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.167924",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Device setup\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "# Instantiate model\n",
    "input_dim = train_df.drop(target_clm, axis=1).shape[1]\n",
    "model = FullMultimodalModel(tab_input_dim=train_df.drop([\"id\", target_clm], axis=1).shape[1])\n",
    "model.to(device)\n",
    "\n",
    "model = model.float()\n",
    "# Loss and optimizer\n",
    "criterion = torch.nn.MSELoss()\n",
    "#criterion = torch.nn.BCEWithLogitsLoss()\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=0.001, weight_decay=1e-5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3bc3fd30",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.459993Z",
     "iopub.status.busy": "2025-07-08T11:21:24.459796Z",
     "iopub.status.idle": "2025-07-08T11:21:24.602193Z",
     "shell.execute_reply": "2025-07-08T11:21:24.601367Z"
    },
    "papermill": {
     "duration": 0.148797,
     "end_time": "2025-07-08T11:21:24.603397",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.454600",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Any NaN in features?  False\n",
      "Any NaN in target?  False\n"
     ]
    }
   ],
   "source": [
    "print(\"Any NaN in features? \", np.isnan(data.drop(target_clm, axis=1).to_numpy()).any())\n",
    "print(\"Any NaN in target? \", np.isnan(data[target_clm].to_numpy()).any())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "69b660bf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.614027Z",
     "iopub.status.busy": "2025-07-08T11:21:24.613779Z",
     "iopub.status.idle": "2025-07-08T11:21:24.618855Z",
     "shell.execute_reply": "2025-07-08T11:21:24.618173Z"
    },
    "papermill": {
     "duration": 0.011623,
     "end_time": "2025-07-08T11:21:24.619973",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.608350",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def train(dataloader, optimizer, model, loss_fn, device, master_bar):\n",
    "    model.train()\n",
    "    train_loss = 0.0\n",
    "    for batch in dataloader:\n",
    "        (interior_img, host_img, tab), price = batch\n",
    "        interior_img = interior_img.to(device)\n",
    "        host_img = host_img.to(device)\n",
    "        tab = tab.to(device)\n",
    "        price = price.to(device)\n",
    "        #price = price.long()\n",
    "\n",
    "        #Forward pass\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(tab, interior_img, host_img)\n",
    "        loss = loss_fn(outputs, price)\n",
    "        train_loss += loss.item()\n",
    "        \n",
    "        #Backward pass\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "\n",
    "        master_bar.set_description(f\"Epoch {master_bar.n + 1} (Train)\")\n",
    "        master_bar.set_postfix(loss=f\"{loss.item():.3f}\")\n",
    "\n",
    "    return train_loss / len(dataloader)\n",
    "\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0e1358a5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.630022Z",
     "iopub.status.busy": "2025-07-08T11:21:24.629614Z",
     "iopub.status.idle": "2025-07-08T11:21:24.634057Z",
     "shell.execute_reply": "2025-07-08T11:21:24.633582Z"
    },
    "papermill": {
     "duration": 0.010383,
     "end_time": "2025-07-08T11:21:24.634973",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.624590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def validate(dataloader, model, loss_fn, device, master_bar):\n",
    "    model.eval()\n",
    "    val_loss = 0\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch in dataloader:\n",
    "            (interior_img, host_img, tab), price = batch\n",
    "            interior_img, host_img, tab, price = interior_img.to(device), host_img.to(device), tab.to(device),price.to(device)\n",
    "\n",
    "            #validate\n",
    "            outputs = model(tab, interior_img, host_img)\n",
    "            loss = loss_fn(outputs, price)\n",
    "            val_loss += loss.item()\n",
    "\n",
    "            master_bar.set_description(f\"Epoch {master_bar.n + 1} (Validate)\")\n",
    "            master_bar.set_postfix(loss=f\"{loss.item():.3f}\")\n",
    "    \n",
    "    return val_loss / len(dataloader)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "603602a7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.644890Z",
     "iopub.status.busy": "2025-07-08T11:21:24.644684Z",
     "iopub.status.idle": "2025-07-08T11:21:24.648465Z",
     "shell.execute_reply": "2025-07-08T11:21:24.647977Z"
    },
    "papermill": {
     "duration": 0.009946,
     "end_time": "2025-07-08T11:21:24.649561",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.639615",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def run_training(model, optimizer, loss_function, device, num_epochs, train_dataloader, val_dataloader):\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "\n",
    "    master_bar = trange(num_epochs, desc=\"Training Epochs\")\n",
    "    for epoch in master_bar:\n",
    "        train_loss = train(train_dataloader, optimizer, model, loss_function, device, master_bar)\n",
    "        val_loss = validate(val_dataloader, model, loss_function, device, master_bar)\n",
    "\n",
    "        train_losses.append(train_loss)\n",
    "        val_losses.append(val_loss)\n",
    "\n",
    "    return train_losses, val_losses"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c88c3fd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.660049Z",
     "iopub.status.busy": "2025-07-08T11:21:24.659648Z",
     "iopub.status.idle": "2025-07-08T11:21:24.664401Z",
     "shell.execute_reply": "2025-07-08T11:21:24.663779Z"
    },
    "papermill": {
     "duration": 0.010937,
     "end_time": "2025-07-08T11:21:24.665484",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.654547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def evaluate_model(model, dataloader, device):\n",
    "    model.eval()\n",
    "    model.to(device)\n",
    "    absolute_errors = []\n",
    "    raw_errors = []\n",
    "\n",
    "    with torch.no_grad():\n",
    "        for batch in dataloader:\n",
    "            # Assumes batch is (inputs, targets)\n",
    "            (interior_img, host_img, tab), targets = batch\n",
    "            interior_img, host_img, tab, targets = interior_img.to(device), host_img.to(device), tab.to(device) ,targets.to(device)\n",
    "\n",
    "            outputs = model(tab, interior_img, host_img)\n",
    "            abs_error = abs(outputs - targets)\n",
    "            raw_error = outputs - targets\n",
    "            absolute_errors.extend(abs_error.cpu().numpy())\n",
    "            raw_errors.extend(raw_error.cpu().numpy())\n",
    "\n",
    "    return np.array(absolute_errors), np.array(raw_errors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4a7756df",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.675404Z",
     "iopub.status.busy": "2025-07-08T11:21:24.675209Z",
     "iopub.status.idle": "2025-07-08T11:21:24.679822Z",
     "shell.execute_reply": "2025-07-08T11:21:24.679169Z"
    },
    "papermill": {
     "duration": 0.010752,
     "end_time": "2025-07-08T11:21:24.680921",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.670169",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plot_accuracy(errors, bins = 10, min_range = None, max_range = None, title=\"\"):\n",
    "\n",
    "    if min_range is None:\n",
    "        min_range = min(errors)\n",
    "    if max_range is None:\n",
    "        max_range = max(errors)\n",
    "\n",
    "    counts, bin_edges = np.histogram(errors, bins=bins, range=(min_range, max_range))\n",
    "\n",
    "    percentages = 100 * counts / counts.sum()\n",
    "\n",
    "    bin_widths = bin_edges[1:] - bin_edges[:-1]\n",
    "\n",
    "    plt.bar(bin_edges[:-1], percentages, width = bin_widths, align = 'edge', edgecolor='black')\n",
    "    plt.xlabel(\"Absolute Error\")\n",
    "    plt.ylabel(\"Percentage (%)\")\n",
    "    plt.title(\"Percentage Distribution of \" + title)\n",
    "    \n",
    "    #plt.hist(errors, bins, range=(min_range, max_range), density=True)\n",
    "    plt.grid(True)\n",
    "    plt.show() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e92eb893",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:21:24.690732Z",
     "iopub.status.busy": "2025-07-08T11:21:24.690543Z",
     "iopub.status.idle": "2025-07-08T11:30:23.289446Z",
     "shell.execute_reply": "2025-07-08T11:30:23.288674Z"
    },
    "papermill": {
     "duration": 538.605172,
     "end_time": "2025-07-08T11:30:23.290692",
     "exception": false,
     "start_time": "2025-07-08T11:21:24.685520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch 15 (Validate): 100%|██████████| 15/15 [08:58<00:00, 35.91s/it, loss=40986156.000]\n"
     ]
    }
   ],
   "source": [
    "epochs= 15\n",
    "\n",
    "losses = run_training(model, optimizer, criterion, device, epochs, train_loader, val_loader)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "82a40b78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:30:23.525002Z",
     "iopub.status.busy": "2025-07-08T11:30:23.524760Z",
     "iopub.status.idle": "2025-07-08T11:30:41.177032Z",
     "shell.execute_reply": "2025-07-08T11:30:41.176450Z"
    },
    "papermill": {
     "duration": 17.7703,
     "end_time": "2025-07-08T11:30:41.178369",
     "exception": false,
     "start_time": "2025-07-08T11:30:23.408069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#evaluate\n",
    "abs_err, raw_err = evaluate_model(model, test_loader, device)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "87dd1bc0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:30:41.411297Z",
     "iopub.status.busy": "2025-07-08T11:30:41.410856Z",
     "iopub.status.idle": "2025-07-08T11:30:41.727592Z",
     "shell.execute_reply": "2025-07-08T11:30:41.726934Z"
    },
    "papermill": {
     "duration": 0.433909,
     "end_time": "2025-07-08T11:30:41.728783",
     "exception": false,
     "start_time": "2025-07-08T11:30:41.294874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_accuracy(abs_err, bins = 10, min_range = 0, max_range = 500, title=\"abs errors\")\n",
    "plot_accuracy(raw_err, bins = 20, min_range = -500, max_range = 500, title=\"all errors\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b3889421",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:30:42.019557Z",
     "iopub.status.busy": "2025-07-08T11:30:42.018886Z",
     "iopub.status.idle": "2025-07-08T11:30:42.022829Z",
     "shell.execute_reply": "2025-07-08T11:30:42.022335Z"
    },
    "papermill": {
     "duration": 0.175657,
     "end_time": "2025-07-08T11:30:42.023845",
     "exception": false,
     "start_time": "2025-07-08T11:30:41.848188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def plotLosses(losses, title = \"\"):\n",
    "    plt.plot(range(1, len(losses) + 1),losses, label=title + \" loss\")\n",
    "    plt.legend()\n",
    "    plt.title(title + \" loss per epoch\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "da63407c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-07-08T11:30:42.256489Z",
     "iopub.status.busy": "2025-07-08T11:30:42.256220Z",
     "iopub.status.idle": "2025-07-08T11:30:42.542970Z",
     "shell.execute_reply": "2025-07-08T11:30:42.542367Z"
    },
    "papermill": {
     "duration": 0.404578,
     "end_time": "2025-07-08T11:30:42.544301",
     "exception": false,
     "start_time": "2025-07-08T11:30:42.139723",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plotLosses(losses[0], title=\"training\")\n",
    "plotLosses(losses[1], title=\"validation\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "gpu",
   "dataSources": [
    {
     "datasetId": 7715214,
     "sourceId": 12331747,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31041,
   "isGpuEnabled": true,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 583.435412,
   "end_time": "2025-07-08T11:30:45.267292",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-07-08T11:21:01.831880",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
